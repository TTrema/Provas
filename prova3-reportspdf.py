#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sale = {"sale": 0}
  max_year = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    item_sale = item["total_sales"]
    item_year = item["car"]["car_year"]

    if item_revenue > max_revenue["revenue"]:

      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item_sale > max_sale["sale"]:
      item["sale"] = item_sale
      max_sale = item

    # TODO: also handle most popular car_year
    if item_year in max_year.keys():
      max_year[item_year] += item_sale

    else:
      max_year[item_year] = item_sale

    bestyear, bestsale = max(max_year.items(), key=lambda x:x[1])



  summary =[
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
      "The {} had the most sales: {}".format(
      format_car(max_sale["car"]), max_sale["total_sales"]),
      "The most popular year was {} with {} sales.".format(bestyear, bestsale)
 ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  summare = '\n'.join(summary)
  summary = '<br/>'.join(summary)
  print(summary)

  # TODO: turn this into a PDF report

  reports.generate("/tmp/cars.pdf", "Sales summary for last month", summary, cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  emails.generate("automation@example.com", "student-01@example.com", "Sales summary for last month", summare, "/tmp/cars.pdf")
  emails.send(emails.generate("automation@example.com", "student-01@example.com", "Sales summary for last month", summare, "/tmp/cars.pdf"))

if __name__ == "__main__":
  main(sys.argv)

